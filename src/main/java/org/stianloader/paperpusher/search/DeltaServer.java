package org.stianloader.paperpusher.search;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Collection;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import org.jetbrains.annotations.CheckReturnValue;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.json.XML;
import org.slf4j.LoggerFactory;
import org.stianloader.paperpusher.Paperpusher;
import org.stianloader.paperpusher.search.DeltaDB.ChangeType;
import org.stianloader.paperpusher.search.DeltaDB.ProtoClassId;
import org.stianloader.paperpusher.search.DeltaDB.ProtoGAId;
import org.stianloader.paperpusher.search.DeltaDB.ProtoGAVId;
import org.stianloader.paperpusher.search.DeltaDB.ProtoPackageId;
import org.stianloader.picoresolve.version.MavenVersion;

import io.javalin.http.ContentType;
import io.javalin.http.Context;
import io.javalin.http.HttpStatus;

final class DeltaServer {

    private static final String HTML_AFTERWORD = "<hr><hr><p style=\"color:grey\" align=\"right\">&copy;"
            + Paperpusher.COPYRIGHT_YEARS + " stianloader.org, page generated by nightly-paperpusher "
            + Paperpusher.PAPERPUSHER_VERSION + "</p>\n</body>\n</html>";

    static final void listClasses(@NotNull Connection dbConn, @NotNull Context context) {
        String htmlPreamble = """
            <!DOCTYPE html>
            <html lang="en">
            <head>
            <title>Class list</title>
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
             <meta name="viewport" content="width=device-width, initial-scale=1"/>
            </head>
            <body>
        """;

        ProtoGAId gaidRow = DeltaServer.lookupGAIdRow(dbConn, context, htmlPreamble, "../../..");
        if (gaidRow == null) {
            return;
        }
        ProtoPackageId packageRow = DeltaServer.lookupPackageIdRow(dbConn, context, htmlPreamble, "../../..", gaidRow);
        if (packageRow == null) {
            return;
        }

        try (Statement statementB = dbConn.createStatement();
                ResultSet versionLookup = statementB.executeQuery("SELECT rowid, version FROM gavid where gaid = " + gaidRow.rowId());
                Statement statementC = dbConn.createStatement();
                ResultSet classes = statementC.executeQuery("SELECT rowid, className FROM classid WHERE packageId = " + packageRow.rowId() + " ORDER BY className");
                PreparedStatement classDeltaLookup = dbConn.prepareStatement("SELECT versionId, changetype FROM classdelta WHERE classId = ?")) {

            StringBuilder htmlOut = new StringBuilder(htmlPreamble);
            htmlOut
                .append("<h1>Class listing for project ")
                .append(gaidRow.groupId())
                .append(":")
                .append(gaidRow.artifactId())
                .append(" package ")
                .append(packageRow.packageName())
                .append("</h1><p>&gt; Return to <a href=\"../../../packages/")
                .append(gaidRow.groupId())
                .append("/")
                .append(gaidRow.artifactId())
                .append("\">list of packages for project</a></p><p>&gt; Return to <a href=\"../../../projects\">list of projects</a></p><ul>");

            Map<Integer, MavenVersion> versionTextLookup = new HashMap<>();

            while (versionLookup.next()) {
                versionTextLookup.put(versionLookup.getInt(1), MavenVersion.parse(Objects.requireNonNull(versionLookup.getString(2))));
            }

            while (classes.next()) {
                int classId = classes.getInt(1);
                String className = classes.getString(2);

                MavenVersion introducedVersion = null;
                MavenVersion lastIntroduction = null;
                MavenVersion removedVersion = null;
                boolean discontinious = false;

                Map<MavenVersion, ChangeType> entries = new TreeMap<>();

                classDeltaLookup.setInt(1, classId);
                try (ResultSet classDeltas = classDeltaLookup.executeQuery()) {
                    while (classDeltas.next()) {
                        MavenVersion version = versionTextLookup.get(classDeltas.getInt(1));
                        if (version == null) {
                            throw new IllegalStateException("Corrupted database: Version not registered.");
                        }
                        ChangeType changeType = ChangeType.lookupValue(classDeltas.getInt(2));
                        entries.put(version, changeType);
                        switch (changeType) {
                        case ChangeType.ADDED:
                            discontinious = introducedVersion != null; // The element was added more than once
                            if (introducedVersion == null || introducedVersion.isNewerThan(version)) {
                                introducedVersion = version;
                            }
                            if (lastIntroduction == null || version.isNewerThan(lastIntroduction)) {
                                lastIntroduction = version;
                            }
                            break;
                        case ChangeType.REMOVED:
                            if (removedVersion == null || version.isNewerThan(removedVersion)) {
                                removedVersion = version;
                            }
                            break;
                        case ChangeType.CONTENTS_CHANGED:
                            break;
                        }
                    }
                }

                if (introducedVersion == null || lastIntroduction == null) {
                    htmlOut.append("<li><p style=\"color:red\"> Class <b>").append(className).append("</b> was never available?</p></li>");
                    continue;
                }

                boolean available = removedVersion == null || lastIntroduction.isNewerThan(removedVersion);

                htmlOut.append(available ? "<li><p> Class " : "<li><p><span style=\"color:red\"> Class ").append(className);
                htmlOut.append(available ? "<span style=\"color:green\"> Introduced in " : "</span><span style=\"color:gray\"> Introduced in ");
                htmlOut.append(lastIntroduction.getOriginText()).append("</span>");

                if (!available) {
                    htmlOut.append("<span style=\"color:red\"> Removed in ").append(Objects.requireNonNull(removedVersion).getOriginText()).append("</span>");
                } else if (discontinious) {
                    htmlOut.append("<span style=\"color:orange\"> Warning: Intermittently available starting from version ").append(introducedVersion.getOriginText()).append("</span>");
                } else if (removedVersion != null) {
                    throw new IllegalStateException("removedVersion != null");
                }

                htmlOut
                    .append("</p><p>View <a href=\"../../../members/")
                    .append(gaidRow.groupId())
                    .append("/")
                    .append(gaidRow.artifactId())
                    .append("/")
                    .append(packageRow.packageName().replace('/', '.'))
                    .append("/")
                    .append(className)
                    .append("\">class members</a></p></li>");
            }

            htmlOut.append("</ul>").append(DeltaServer.HTML_AFTERWORD);
            context.result(htmlOut.toString());
            context.contentType(ContentType.HTML);
            context.status(HttpStatus.OK);
        } catch (SQLException e) {
            LoggerFactory.getLogger(DeltaServer.class).error("Unable to query classes from database for gaid '{}', packageId '{}'", gaidRow, packageRow, e);
            context.result("HTTP Response code 500 (INTERNAL SERVER ERROR): The server was unable to obtain the available classes for the project from the underlying database. Please report this bug.");
            context.status(HttpStatus.INTERNAL_SERVER_ERROR);
            return;
        }
    }

    static final void listMembers(@NotNull Connection dbConn, @NotNull Context context) {
        String htmlPreamble = """
            <!DOCTYPE html>
            <html lang="en">
            <head>
            <title>Member list</title>
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
             <meta name="viewport" content="width=device-width, initial-scale=1"/>
            </head>
            <body>
        """;

        ProtoGAId gaidRow = DeltaServer.lookupGAIdRow(dbConn, context, htmlPreamble, "../../../..");
        if (gaidRow == null) {
            return;
        }
        ProtoPackageId packageRow = DeltaServer.lookupPackageIdRow(dbConn, context, htmlPreamble, "../../../..", gaidRow);
        if (packageRow == null) {
            return;
        }
        ProtoClassId classRow = DeltaServer.lookupClassIdRow(dbConn, context, htmlPreamble, "../../../..", gaidRow, packageRow);
        if (classRow == null) {
            return;
        }

        try (Statement statementB = dbConn.createStatement();
                ResultSet versionLookup = statementB.executeQuery("SELECT rowid, version FROM gavid where gaid = " + gaidRow.rowId());
                Statement statementC = dbConn.createStatement();
                ResultSet members = statementC.executeQuery("SELECT rowid, memberName, memberDesc FROM memberid WHERE classId = " + classRow.rowId());
                PreparedStatement memberDeltaLookup = dbConn.prepareStatement("SELECT versionId, changetype FROM memberdelta WHERE memberId = ?")) {

            StringBuilder htmlOut = new StringBuilder(htmlPreamble);
            htmlOut
                .append("<h1>Class member listing for project ")
                .append(gaidRow.groupId())
                .append(":")
                .append(gaidRow.artifactId())
                .append(" class ")
                .append(packageRow.packageName())
                .append("/")
                .append(classRow.className())
                .append("</h1><p>&gt; Return to <a href=\"../../../../classes/")
                .append(gaidRow.groupId())
                .append("/")
                .append(gaidRow.artifactId())
                .append("/")
                .append(packageRow.packageName().replace('/', '.'))
                .append("\">list of classes for package</a></p><p>&gt; Return to <a href=\"../../../../packages/")
                .append(gaidRow.groupId())
                .append("/")
                .append(gaidRow.artifactId())
                .append("\">list of packages for project</a></p><p>&gt; Return to <a href=\"../../../../projects\">list of projects</a></p><ul>");

            Map<Integer, MavenVersion> versionTextLookup = new HashMap<>();

            while (versionLookup.next()) {
                versionTextLookup.put(versionLookup.getInt(1), MavenVersion.parse(Objects.requireNonNull(versionLookup.getString(2))));
            }

            Map<ArtifactContentClassMember, Integer> sortedMembers = new TreeMap<>();

            while (members.next()) {
                int memberId = members.getInt(1);
                String memberName = Objects.requireNonNull(members.getString(2));
                String memberDesc = Objects.requireNonNull(members.getString(3));
                sortedMembers.put(new ArtifactContentClassMember(classRow.className(), memberName, memberDesc), memberId);
            }

            for (Map.Entry<ArtifactContentClassMember, Integer> entry : sortedMembers.entrySet()) {
                MavenVersion introducedVersion = null;
                MavenVersion lastIntroduction = null;
                MavenVersion removedVersion = null;
                boolean discontinious = false;

                Map<MavenVersion, ChangeType> entries = new TreeMap<>();

                memberDeltaLookup.setInt(1, entry.getValue());
                try (ResultSet classDeltas = memberDeltaLookup.executeQuery()) {
                    while (classDeltas.next()) {
                        MavenVersion version = versionTextLookup.get(classDeltas.getInt(1));
                        if (version == null) {
                            throw new IllegalStateException("Corrupted database: Version not registered.");
                        }
                        ChangeType changeType = ChangeType.lookupValue(classDeltas.getInt(2));
                        entries.put(version, changeType);
                        switch (changeType) {
                        case ChangeType.ADDED:
                            discontinious = introducedVersion != null; // The element was added more than once
                            if (introducedVersion == null || introducedVersion.isNewerThan(version)) {
                                introducedVersion = version;
                            }
                            if (lastIntroduction == null || version.isNewerThan(lastIntroduction)) {
                                lastIntroduction = version;
                            }
                            break;
                        case ChangeType.REMOVED:
                            if (removedVersion == null || version.isNewerThan(removedVersion)) {
                                removedVersion = version;
                            }
                            break;
                        case ChangeType.CONTENTS_CHANGED:
                            break;
                        }
                    }
                }

                ArtifactContentClassMember member = entry.getKey();
                boolean isField = member.desc.charAt(0) != '(';

                if (introducedVersion == null || lastIntroduction == null) {
                    htmlOut
                        .append("<li><p style=\"color:red\"> ")
                        .append(isField ? "Field <b>" : "Method <b>")
                        .append(XML.escape(member.name))
                        .append(" ")
                        .append(member.desc)
                        .append("</b> was never available?</p></li>");
                    continue;
                }

                boolean available = removedVersion == null || lastIntroduction.isNewerThan(removedVersion);

                htmlOut
                    .append(available ? "<li><p> " : "<li><p><span style=\"color:red\"> ")
                    .append(isField ? "Field <b>" : "Method <b>")
                    .append(member.name)
                    .append(" ")
                    .append(member.desc)
                    .append(available ? "</b><span style=\"color:green\"> Introduced in " : "</b></span><span style=\"color:gray\"> Introduced in ")
                    .append(lastIntroduction.getOriginText())
                    .append("</span>");

                if (!available) {
                    htmlOut.append("<span style=\"color:red\"> Removed in ").append(Objects.requireNonNull(removedVersion).getOriginText()).append("</span>");
                } else if (discontinious) {
                    htmlOut.append("<span style=\"color:orange\"> Warning: Intermittently available starting from version ").append(introducedVersion.getOriginText()).append("</span>");
                } else if (removedVersion != null) {
                    throw new IllegalStateException("removedVersion != null");
                }

                htmlOut.append("</p></li>");
            }

            htmlOut.append("</ul>").append(DeltaServer.HTML_AFTERWORD);
            context.result(htmlOut.toString());
            context.contentType(ContentType.HTML);
            context.status(HttpStatus.OK);
        } catch (SQLException e) {
            LoggerFactory.getLogger(DeltaServer.class).error("Unable to query class members from database for gaid '{}', packageId '{}', classId '{}'", gaidRow, packageRow, classRow, e);
            context.result("HTTP Response code 500 (INTERNAL SERVER ERROR): The server was unable to obtain the available class members for the package from the underlying database. Please report this bug.");
            context.status(HttpStatus.INTERNAL_SERVER_ERROR);
            return;
        }
    }

    static final void listPackages(@NotNull Connection dbConn, @NotNull Context context) {
        String htmlPreamble = """
            <!DOCTYPE html>
            <html lang="en">
            <head>
            <title>Package list</title>
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
             <meta name="viewport" content="width=device-width, initial-scale=1"/>
            </head>
            <body>
        """;

        ProtoGAId gaidRow = DeltaServer.lookupGAIdRow(dbConn, context, htmlPreamble, "../..");
        if (gaidRow == null) {
            return;
        }

        try (Statement statementB = dbConn.createStatement();
                ResultSet versionLookup = statementB.executeQuery("SELECT rowid, version FROM gavid where gaid = " + gaidRow.rowId());
                Statement statementC = dbConn.createStatement();
                ResultSet packages = statementC.executeQuery("SELECT rowid, packageName FROM packageid WHERE gaid = " + gaidRow.rowId() + " ORDER BY packageName");
                PreparedStatement packageDeltaLookup = dbConn.prepareStatement("SELECT versionId, changetype FROM packagedelta WHERE packageid = ?")) {

            StringBuilder htmlOut = new StringBuilder(htmlPreamble);
            htmlOut.append("<h1>Package listing for project ").append(gaidRow.groupId()).append(":").append(gaidRow.artifactId()).append("</h1>");
            htmlOut.append("<p>&gt; Return to <a href=\"../../projects\">list of projects</a></p><ul>");

            Map<Integer, MavenVersion> versionTextLookup = new HashMap<>();

            while (versionLookup.next()) {
                versionTextLookup.put(versionLookup.getInt(1), MavenVersion.parse(Objects.requireNonNull(versionLookup.getString(2))));
            }

            while (packages.next()) {
                int packageId = packages.getInt(1);
                String packageName = packages.getString(2);

                MavenVersion introducedVersion = null;
                MavenVersion lastIntroduction = null;
                MavenVersion removedVersion = null;
                boolean discontinious = false;

                Map<MavenVersion, ChangeType> entries = new TreeMap<>();

                packageDeltaLookup.setInt(1, packageId);
                try (ResultSet packageDeltas = packageDeltaLookup.executeQuery()) {
                    while (packageDeltas.next()) {
                        MavenVersion version = versionTextLookup.get(packageDeltas.getInt(1));
                        if (version == null) {
                            throw new IllegalStateException("Corrupted database: Version not registered.");
                        }
                        ChangeType changeType = ChangeType.lookupValue(packageDeltas.getInt(2));
                        entries.put(version, changeType);
                        switch (changeType) {
                        case ChangeType.ADDED:
                            discontinious = introducedVersion != null; // The element was added more than once
                            if (introducedVersion == null || introducedVersion.isNewerThan(version)) {
                                introducedVersion = version;
                            }
                            if (lastIntroduction == null || version.isNewerThan(lastIntroduction)) {
                                lastIntroduction = version;
                            }
                            break;
                        case ChangeType.REMOVED:
                            if (removedVersion == null || version.isNewerThan(removedVersion)) {
                                removedVersion = version;
                            }
                            break;
                        case ChangeType.CONTENTS_CHANGED:
                            break;
                        }
                    }
                }

                if (introducedVersion == null || lastIntroduction == null) {
                    htmlOut.append("<li><p style=\"color:red\"> Package <b>").append(packageName).append("</b> was never available?</p></li>");
                    continue;
                }

                boolean available = removedVersion == null || lastIntroduction.isNewerThan(removedVersion);

                htmlOut.append(available ? "<li><p> Package " : "<li><p><span style=\"color:red\"> Package ").append(packageName);
                htmlOut.append(available ? "<span style=\"color:green\"> Introduced in " : "</span><span style=\"color:gray\"> Introduced in ");
                htmlOut.append(lastIntroduction.getOriginText()).append("</span>");

                if (!available) {
                    htmlOut.append("<span style=\"color:red\"> Removed in ").append(Objects.requireNonNull(removedVersion).getOriginText()).append("</span>");
                } else if (discontinious) {
                    htmlOut.append("<span style=\"color:orange\"> Warning: Intermittently available starting from version ").append(introducedVersion.getOriginText()).append("</span>");
                } else if (removedVersion != null) {
                    throw new IllegalStateException("removedVersion != null");
                }

                htmlOut
                    .append("</p><p>View <a href=\"../../classes/")
                    .append(gaidRow.groupId())
                    .append("/")
                    .append(gaidRow.artifactId())
                    .append("/")
                    .append(packageName.replace('/', '.'))
                    .append("\">classes</a></p></li>");
            }

            htmlOut.append("</ul>").append(DeltaServer.HTML_AFTERWORD);
            context.result(htmlOut.toString());
            context.contentType(ContentType.HTML);
            context.status(HttpStatus.OK);
        } catch (SQLException e) {
            LoggerFactory.getLogger(DeltaServer.class).error("Unable to query packages from database for gaid '{}'", gaidRow, e);
            context.result("HTTP Response code 500 (INTERNAL SERVER ERROR): The server was unable to obtain the available packages for the project from the underlying database. Please report this bug.");
            context.status(HttpStatus.INTERNAL_SERVER_ERROR);
            return;
        }
    }

    static final void listProjects(@NotNull Connection dbConn, @NotNull Context context) {
        StringBuilder htmlOut = new StringBuilder();
        htmlOut.append("""
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <title>Project list</title>
                        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
                        <meta name="viewport" content="width=device-width, initial-scale=1"/>
                        </head>
                        <body>
                        <h1>Project list</h1>
                        <hr>
                        """);

        try (Statement statement = dbConn.createStatement()) {
            try (ResultSet result = statement.executeQuery("SELECT rowid, groupId, artifactId FROM gaid ORDER BY groupId, artifactid");
                    PreparedStatement versionCountQuery = dbConn.prepareStatement("SELECT COUNT(*) FROM gavid WHERE gaId = ?")) {

                String lastGroup = "";
                boolean firstGroup = true;
                while (result.next()) {
                    int gaId = result.getInt(1);
                    String groupId = result.getString(2);
                    String artifactId = result.getString(3);

                    if (!groupId.equals(lastGroup)) {
                        lastGroup = groupId;
                        if (!firstGroup) {
                            htmlOut.append("</ul>");
                        }
                        firstGroup = false;
                        htmlOut.append("<hr><h2>Group ").append(groupId).append("</h2><ul>");
                    }

                    versionCountQuery.setInt(1, gaId);
                    int versionCount = 0;
                    try (ResultSet versionCountResult = versionCountQuery.executeQuery()) {
                        versionCount = versionCountResult.getInt(1);
                    }

                    htmlOut.append("<li><p>").append(artifactId).append("&emsp;<span style=\"color:grey\">").append(versionCount).append(" versions published</span></p>");
                    htmlOut.append("<p>&gt; View <a href=\"./packages/").append(groupId).append("/").append(artifactId).append("\">packages</a></p></li>");
                    htmlOut.append("<p>&gt; View <a href=\"./versions/").append(groupId).append("/").append(artifactId).append("\">version history</a></p></li>");
                }

                if (!firstGroup) {
                    htmlOut.append("</ul>");
                }
            }
        } catch (SQLException e) {
            LoggerFactory.getLogger(DeltaServer.class).error("Unable to query projects from database", e);
            context.result("HTTP Response code 500 (INTERNAL SERVER ERROR): The server was unable to obtain the projects from the underlying database. Please report this bug.");
            context.status(HttpStatus.INTERNAL_SERVER_ERROR);
            return;
        }

        htmlOut.append(DeltaServer.HTML_AFTERWORD);

        context.result(htmlOut.toString());
        context.contentType(ContentType.HTML);
        context.status(HttpStatus.OK);
    }

    static final void listVersionChanges(@NotNull Connection dbConn, @NotNull Context context) {
        String htmlPreamble = """
                <!DOCTYPE html>
                <html lang="en">
                <head>
                <title>Version changelog</title>
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
                 <meta name="viewport" content="width=device-width, initial-scale=1"/>
                </head>
                <body>
            """;

        ProtoGAId gaidRow = DeltaServer.lookupGAIdRow(dbConn, context, htmlPreamble, "../../..");
        if (gaidRow == null) {
            return;
        }

        ProtoGAVId gavidRow = DeltaServer.lookupGAVIdRow(dbConn, context, htmlPreamble, "../../..", gaidRow);
        if (gavidRow == null) {
            return;
        }

        Map<ChangeType, Set<@NotNull String>> packageDeltas = new EnumMap<>(ChangeType.class);
        Map<ChangeType, Set<@NotNull String>> classDeltas = new EnumMap<>(ChangeType.class);
        Map<ChangeType, Set<@NotNull MemberTriple>> memberDeltas = new EnumMap<>(ChangeType.class);
        for (ChangeType v : ChangeType.values()) {
            packageDeltas.put(v, new TreeSet<>());
            classDeltas.put(v, new TreeSet<>());
            memberDeltas.put(v, new TreeSet<>());
        }

        long timerStart = System.nanoTime();

        try (PreparedStatement packageDeltaStatement = dbConn.prepareStatement(DeltaDB.SQL_PREPARED_LOOKUP_PACKAGE_DELTAS_FULL);
                PreparedStatement classDeltaStatement = dbConn.prepareStatement(DeltaDB.SQL_PREPARED_LOOKUP_CLASS_DELTAS_FULL);
                PreparedStatement memberDeltaStatement = dbConn.prepareStatement(DeltaDB.SQL_PREPARED_LOOKUP_MEMBER_DELTAS_FULL)) {
            packageDeltaStatement.setInt(1, gavidRow.rowId());
            classDeltaStatement.setInt(1, gavidRow.rowId());
            memberDeltaStatement.setInt(1, gavidRow.rowId());
            try (ResultSet result = memberDeltaStatement.executeQuery()) {
                while (result.next()) {
                    int changetype = result.getInt(1);
                    String packageName = Objects.requireNonNull(result.getString(2));
                    String className = Objects.requireNonNull(result.getString(3));
                    String memberName = Objects.requireNonNull(result.getString(4));
                    String memberDesc = Objects.requireNonNull(result.getString(5));

                    String owner = packageName.equals(DeltaDB.DEFAULT_PACKAGE_NAME) ? className : packageName + "/" + className;

                    memberDeltas.get(ChangeType.lookupValue(changetype)).add(new MemberTriple(owner, memberName, memberDesc));
                }
            }

            try (ResultSet result = classDeltaStatement.executeQuery()) {
                while (result.next()) {
                    int changetype = result.getInt(1);
                    String packageName = Objects.requireNonNull(result.getString(2));
                    String className = Objects.requireNonNull(result.getString(3));
                    String owner = packageName.equals(DeltaDB.DEFAULT_PACKAGE_NAME) ? className : packageName + "/" + className;
                    classDeltas.get(ChangeType.lookupValue(changetype)).add(owner);
                }
            }

            try (ResultSet result = packageDeltaStatement.executeQuery()) {
                while (result.next()) {
                    int changetype = result.getInt(1);
                    String packageName = Objects.requireNonNull(result.getString(2));
                    packageDeltas.get(ChangeType.lookupValue(changetype)).add(packageName);
                }
            }
        } catch (SQLException e) {
            LoggerFactory.getLogger(DeltaServer.class).error("Unable to query deltas from database for gavid '{}' (gaid: '{}')", gavidRow, gaidRow, e);
            context.result("HTTP Response code 500 (INTERNAL SERVER ERROR): The server was unable to obtain the available versions for the project from the underlying database. Please report this bug.");
            context.status(HttpStatus.INTERNAL_SERVER_ERROR);
            return;
        }

        int elementCount = Arrays.asList(packageDeltas, classDeltas, memberDeltas)
                .stream()
                .map(Map::values)
                .flatMap(Collection::stream)
                .mapToInt(Set::size)
                .sum();

        final StringBuilder htmlOut = new StringBuilder(htmlPreamble);
        htmlOut
            .append("<h1>Changelog for version ")
            .append(gavidRow.version())
            .append(" of project ")
            .append(gaidRow.groupId())
            .append(":")
            .append(gaidRow.artifactId())
            .append("</h1><p>&gt; Return to <a href=\"../../../versions/")
            .append(gaidRow.groupId().replace('/', '.'))
            .append("/")
            .append(gaidRow.artifactId())
            .append("\">list of versions for this project</a></p><p>&gt; Return to <a href=\"../../../projects\">list of projects</a></p><p style=\"color:grey\">Fetched ")
            .append(elementCount)
            .append(" rows in ")
            .append((System.nanoTime() - timerStart) / 1_000_000)
            .append(" ms.</p><ul>");

        for (Map.Entry<ChangeType, Set<String>> entry : packageDeltas.entrySet()) {
            if (entry.getValue().isEmpty()) {
                continue;
            }
            htmlOut
                .append("<li><h2 id=\"packages-")
                .append(entry.getKey().name().toLowerCase(Locale.ROOT))
                .append("\">Packages ")
                .append(entry.getKey().getVerb())
                .append(":</h2><ul>");
            for (String pkg : entry.getValue()) {
                htmlOut.append("<li><p>").append(pkg).append("</p></li>");
            }
            htmlOut.append("</ul></li>");
        }

        for (Map.Entry<ChangeType, Set<String>> entry : classDeltas.entrySet()) {
            if (entry.getValue().isEmpty()) {
                continue;
            }
            htmlOut
                .append("<li><h2 id=\"classes-")
                .append(entry.getKey().name().toLowerCase(Locale.ROOT))
                .append("\">Classes ")
                .append(entry.getKey().getVerb())
                .append(":</h2><ul>");
            for (String clazz : entry.getValue()) {
                htmlOut.append("<li><p>").append(clazz).append("</p></li>");
            }
            htmlOut.append("</ul></li>");
        }

        for (Map.Entry<ChangeType, Set<MemberTriple>> entry : memberDeltas.entrySet()) {
            if (entry.getValue().isEmpty()) {
                continue;
            }
            htmlOut
                .append("<li><h2 id=\"members-")
                .append(entry.getKey().name().toLowerCase(Locale.ROOT))
                .append("\">Members ")
                .append(entry.getKey().getVerb())
                .append(":</h2><ul>");
            for (MemberTriple triple : entry.getValue()) {
                htmlOut
                    .append("<li><p>")
                    .append(triple.getOwnerFQN())
                    .append(" ")
                    .append(triple.getSanitizedName())
                    .append(":")
                    .append(triple.getDesc())
                    .append("</p></li>");
            }
            htmlOut.append("</ul></li>");
        }

        htmlOut.append("</ul>").append(DeltaServer.HTML_AFTERWORD);
        context.result(htmlOut.toString());
        context.contentType(ContentType.HTML);
        context.status(HttpStatus.OK);
    }

    static final void listVersions(@NotNull Connection dbConn, @NotNull Context context) {
        String htmlPreamble = """
                <!DOCTYPE html>
                <html lang="en">
                <head>
                <title>Version list</title>
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
                 <meta name="viewport" content="width=device-width, initial-scale=1"/>
                </head>
                <body>
            """;

        ProtoGAId gaidRow = DeltaServer.lookupGAIdRow(dbConn, context, htmlPreamble, "../..");
        if (gaidRow == null) {
            return;
        }

        record GAVStatistics (int[] packageStats, int[] classStats, int[] memberStats) {}
        NavigableMap<MavenVersion, GAVStatistics> statistics = new TreeMap<>();

        try (Statement statement = dbConn.createStatement();
                ResultSet versionLookupResult = statement.executeQuery("SELECT rowid, version FROM gavid WHERE gaid = " + gaidRow.rowId());
                PreparedStatement packageDeltaLookup = dbConn.prepareStatement("SELECT COUNT(*), changetype FROM packagedelta WHERE versionId = ? GROUP BY changetype");
                PreparedStatement classDeltaLookup = dbConn.prepareStatement("SELECT COUNT(*), changetype FROM classdelta WHERE versionId = ? GROUP BY changetype");
                PreparedStatement memberDeltaLookup = dbConn.prepareStatement("SELECT COUNT(*), changetype FROM memberdelta WHERE versionId = ? GROUP BY changetype")) {

            while (versionLookupResult.next()) {
                int gavId = versionLookupResult.getInt(1);
                MavenVersion version = MavenVersion.parse(Objects.requireNonNull(versionLookupResult.getString(2), "GAV with null version in database"));
                final int changetypeValueCount = ChangeType.getValueCount();
                int[] pkgStats = new int[changetypeValueCount];
                int[] classStats = new int[changetypeValueCount];
                int[] memberStats = new int[changetypeValueCount];

                packageDeltaLookup.setInt(1, gavId);
                classDeltaLookup.setInt(1, gavId);
                memberDeltaLookup.setInt(1, gavId);

                try (ResultSet packageStatResults = packageDeltaLookup.executeQuery();
                        ResultSet classStatResults = classDeltaLookup.executeQuery();
                        ResultSet memberStatResults = memberDeltaLookup.executeQuery()) {
                    while (packageStatResults.next()) {
                        int count = packageStatResults.getInt(1);
                        int changetype = packageStatResults.getInt(2);
                        if (changetype >= changetypeValueCount) {
                            LoggerFactory.getLogger(DeltaServer.class).warn("Database contains garbage data: Package delta with invalid changetype {} for gavid {} ({} occurences).", changetype, gavId, count);
                            continue; // Skip unknown property
                        }
                        pkgStats[changetype] = count;
                    }
                    while (classStatResults.next()) {
                        int count = classStatResults.getInt(1);
                        int changetype = classStatResults.getInt(2);
                        if (changetype >= changetypeValueCount) {
                            LoggerFactory.getLogger(DeltaServer.class).warn("Database contains garbage data: Class delta with invalid changetype {} for gavid {} ({} occurences).", changetype, gavId, count);
                            continue; // Skip unknown property
                        }
                        classStats[changetype] = count;
                    }
                    while (memberStatResults.next()) {
                        int count = memberStatResults.getInt(1);
                        int changetype = memberStatResults.getInt(2);
                        if (changetype >= changetypeValueCount) {
                            LoggerFactory.getLogger(DeltaServer.class).warn("Database contains garbage data: Member delta with invalid changetype {} for gavid {} ({} occurences).", changetype, gavId, count);
                            continue; // Skip unknown property
                        }
                        memberStats[changetype] = count;
                    }
                }

                statistics.put(version, new GAVStatistics(pkgStats, classStats, memberStats));
            }
        } catch (SQLException e) {
            LoggerFactory.getLogger(DeltaServer.class).error("Unable to query versions from database for gaid '{}'", gaidRow, e);
            context.result("HTTP Response code 500 (INTERNAL SERVER ERROR): The server was unable to obtain the available versions for the project from the underlying database. Please report this bug.");
            context.status(HttpStatus.INTERNAL_SERVER_ERROR);
            return;
        }

        final StringBuilder htmlOut = new StringBuilder(htmlPreamble);
        htmlOut
            .append("<h1>Version listing for project ")
            .append(gaidRow.groupId())
            .append(":")
            .append(gaidRow.artifactId())
            .append("</h1><p>&gt; Return to <a href=\"../../projects\">list of projects</a></p><ul>");

        for (Map.Entry<MavenVersion, GAVStatistics> entry : statistics.descendingMap().entrySet()) {
            htmlOut
                .append("<li><h2>Version ")
                .append(entry.getKey().getOriginText())
                .append("</h2><p>&gt; <a href=\"../../changelog/")
                .append(gaidRow.groupId().replace('/', '.'))
                .append("/")
                .append(gaidRow.artifactId())
                .append("/")
                .append(entry.getKey().getOriginText())
                .append("\">View changelog</a></p><ul>");

            final class Helper {
                static void appendSummaryData(@NotNull StringBuilder htmlOut, @NotNull String nounSingular, @NotNull String nounPlural, int[] statisticArray) {
                    emptyGuard: {
                        for (int v : statisticArray) {
                            if (v != 0) {
                                break emptyGuard;
                            }
                        }
                        return;
                    }
                    htmlOut.append("<li>");
                    for (int i = 0; i < statisticArray.length; i++) {
                        int v = statisticArray[i];
                        if (v != 0) {
                            htmlOut
                                .append("<p>")
                                .append(v)
                                .append(" ")
                                .append(v == 1 ? nounSingular : nounPlural)
                                .append(" ")
                                .append(ChangeType.lookupValue(i).getVerb())
                                .append("</p>");
                        }
                    }
                    htmlOut.append("</li>");
                }
            }

            Helper.appendSummaryData(htmlOut, "package", "packages", entry.getValue().packageStats);
            Helper.appendSummaryData(htmlOut, "class", "classes", entry.getValue().classStats);
            Helper.appendSummaryData(htmlOut, "member", "members", entry.getValue().memberStats);

            htmlOut.append("</ul></li>");
        }

        htmlOut.append("</ul>").append(DeltaServer.HTML_AFTERWORD);
        context.result(htmlOut.toString());
        context.contentType(ContentType.HTML);
        context.status(HttpStatus.OK);
    }

    @Nullable
    @CheckReturnValue
    private static ProtoClassId lookupClassIdRow(@NotNull Connection dbConn, @NotNull Context context, @NotNull String htmlPreamble, @NotNull String pathToRoot, @NotNull ProtoGAId gaid, @NotNull ProtoPackageId packageId) {
        String className = context.pathParam("class");

        try (PreparedStatement statement = dbConn.prepareStatement("SELECT rowid FROM classid WHERE packageId = ? AND className = ?")) {
            statement.setInt(1, packageId.rowId());
            statement.setString(2, className);

            try (ResultSet classLookup = statement.executeQuery()) {
                if (!classLookup.next()) {
                    context.result(
                        htmlPreamble
                        + "<p>HTTP response code 404 (NOT FOUND): The provided class does not seem to exist on this server. For a list of all available classes for the given package, click <a href=\"" + pathToRoot + "/classes/" + gaid.groupId() + "/" + gaid.artifactId() + "/" + packageId.packageName().replace('/', '.') + "\">this link.</a></p>"
                        + DeltaServer.HTML_AFTERWORD
                    );
                    context.contentType(ContentType.HTML);
                    context.status(HttpStatus.NOT_FOUND);
                    return null;
                }
                return new ProtoClassId(classLookup.getInt(1), packageId.rowId(), className);
            }
        } catch (SQLException e) {
            LoggerFactory.getLogger(DeltaServer.class).error("Unable to query classes from database for GAid '{}', packageId '{}', class '{}'", gaid, packageId, className, e);
            context.result("HTTP Response code 500 (INTERNAL SERVER ERROR): The server was unable to obtain the available classes for the package from the underlying database. Please report this bug.");
            context.status(HttpStatus.INTERNAL_SERVER_ERROR);
            return null;
        }
    }

    @Nullable
    @CheckReturnValue
    private static ProtoGAId lookupGAIdRow(@NotNull Connection dbConn, @NotNull Context context, @NotNull String htmlPreamble, @NotNull String pathToRoot) {
        String groupIdString = context.pathParam("groupid");
        String artifactIdString = context.pathParam("artifactid");

        try (PreparedStatement statement = dbConn.prepareStatement("SELECT rowid FROM gaid WHERE groupid = ? AND artifactid = ?")) {
            statement.setString(1, groupIdString);
            statement.setString(2, artifactIdString);

            try (ResultSet gaidLookup = statement.executeQuery()) {
                if (!gaidLookup.next()) {
                    context.result(
                        htmlPreamble
                        + "<p>HTTP response code 404 (NOT FOUND): The provided project does not seem to exist on this server. For a list of all available projects, click <a href=\"" + pathToRoot + "/projects\">this link.</a></p>"
                        + DeltaServer.HTML_AFTERWORD
                    );
                    context.contentType(ContentType.HTML);
                    context.status(HttpStatus.NOT_FOUND);
                    return null;
                }
                return new ProtoGAId(gaidLookup.getInt(1), groupIdString, artifactIdString);
            }
        } catch (SQLException e) {
            LoggerFactory.getLogger(DeltaServer.class).error("Unable to query packages from database for GA '{}':'{}'", groupIdString, artifactIdString, e);
            context.result("HTTP Response code 500 (INTERNAL SERVER ERROR): The server was unable to obtain the available packages for the project from the underlying database. Please report this bug.");
            context.status(HttpStatus.INTERNAL_SERVER_ERROR);
            return null;
        }
    }

    @Nullable
    @CheckReturnValue
    private static ProtoGAVId lookupGAVIdRow(@NotNull Connection dbConn, @NotNull Context context, @NotNull String htmlPreamble, @NotNull String pathToRoot, @NotNull ProtoGAId gaid) {
        String versionName = context.pathParam("version");

        try (PreparedStatement statement = dbConn.prepareStatement(DeltaDB.SQL_PREPARED_LOOKUP_GAVID)) {
            statement.setInt(1, gaid.rowId());
            statement.setString(2, versionName);

            try (ResultSet packageLookup = statement.executeQuery()) {
                if (!packageLookup.next()) {
                    context.result(
                        htmlPreamble
                        + "<p>HTTP response code 404 (NOT FOUND): The provided version does not seem to exist on this server. For a list of all available versions for the given project, click <a href=\"" + pathToRoot + "/versions/" + gaid.groupId() + "/" + gaid.artifactId() + "\">this link.</a></p>"
                        + DeltaServer.HTML_AFTERWORD
                    );
                    context.contentType(ContentType.HTML);
                    context.status(HttpStatus.NOT_FOUND);
                    return null;
                }
                return new ProtoGAVId(packageLookup.getInt(1), gaid.rowId(), versionName);
            }
        } catch (SQLException e) {
            LoggerFactory.getLogger(DeltaServer.class).error("Unable to query GAVId from database for version name '{}' from GA '{}'", versionName, gaid, e);
            context.result("HTTP Response code 500 (INTERNAL SERVER ERROR): The server was unable to obtain the available deltas for the version from the underlying database. Please report this bug.");
            context.status(HttpStatus.INTERNAL_SERVER_ERROR);
            return null;
        }
    }

    @Nullable
    @CheckReturnValue
    private static ProtoPackageId lookupPackageIdRow(@NotNull Connection dbConn, @NotNull Context context, @NotNull String htmlPreamble, @NotNull String pathToRoot, @NotNull ProtoGAId gaid) {
        String packageName = context.pathParam("package").replace('.', '/');

        try (PreparedStatement statement = dbConn.prepareStatement(DeltaDB.SQL_PREPARED_LOOKUP_PACKAGEID)) {
            statement.setInt(1, gaid.rowId());
            statement.setString(2, packageName);

            try (ResultSet packageLookup = statement.executeQuery()) {
                if (!packageLookup.next()) {
                    context.result(
                        htmlPreamble
                        + "<p>HTTP response code 404 (NOT FOUND): The provided package does not seem to exist on this server. For a list of all available packages for the given project, click <a href=\"" + pathToRoot + "/packages/" + gaid.groupId() + "/" + gaid.artifactId() + "\">this link.</a></p>"
                        + DeltaServer.HTML_AFTERWORD
                    );
                    context.contentType(ContentType.HTML);
                    context.status(HttpStatus.NOT_FOUND);
                    return null;
                }
                return new ProtoPackageId(packageLookup.getInt(1), gaid.rowId(), packageName);
            }
        } catch (SQLException e) {
            LoggerFactory.getLogger(DeltaServer.class).error("Unable to query packages from database for Package '{}' from GA '{}'", packageName, gaid, e);
            context.result("HTTP Response code 500 (INTERNAL SERVER ERROR): The server was unable to obtain the available classes for the package from the underlying database. Please report this bug.");
            context.status(HttpStatus.INTERNAL_SERVER_ERROR);
            return null;
        }
    }
}
